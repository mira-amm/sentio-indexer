{
  "programType": "contract",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "()",
      "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
    },
    {
      "type": "(u64, enum lib::data_structures::TokenIdentifier)",
      "concreteTypeId": "9635f73884a133386ba8236d1bceba4a2c76dcf785c558f55ab8095965cb731e",
      "metadataTypeId": 0
    },
    {
      "type": "enum Error",
      "concreteTypeId": "4ed298ed0be3fc65895c5d5263885191731caa9f79ff63e56d98b449e5ba4b3f",
      "metadataTypeId": 4
    },
    {
      "type": "enum lib::data_structures::TokenIdentifier",
      "concreteTypeId": "d5a135148379b6eeb66df67f95d2c23c8b803678d425fa3d7c191c0555ccfe51",
      "metadataTypeId": 5
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 6
    },
    {
      "type": "enum std::option::Option<struct lib::data_structures::CampaignInfo>",
      "concreteTypeId": "6e6ed3ba500c0ccfb48956c2f554e29d5ee6d9aa23a33ccfc7bd5e8b30c3ee57",
      "metadataTypeId": 7,
      "typeArguments": [
        "486c08a4f3b4d822274de2ec53c05521b4c22835be1de3d13b472c0f08ddb30c"
      ]
    },
    {
      "type": "enum std::option::Option<struct lib::data_structures::Position>",
      "concreteTypeId": "a4b1620cd821584119545df53e0b638835f43f899179479d5b22becfcf189ee8",
      "metadataTypeId": 7,
      "typeArguments": [
        "3b78831ffa70e307177d090b6ba06067f5cfc625a38010a1235f1b3748dd4723"
      ]
    },
    {
      "type": "enum std::option::Option<struct std::string::String>",
      "concreteTypeId": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
      "metadataTypeId": 7,
      "typeArguments": [
        "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
      ]
    },
    {
      "type": "enum std::option::Option<u64>",
      "concreteTypeId": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
      "metadataTypeId": 7,
      "typeArguments": [
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
      ]
    },
    {
      "type": "enum std::option::Option<u8>",
      "concreteTypeId": "2da102c46c7263beeed95818cd7bee801716ba8303dddafdcd0f6c9efda4a0f1",
      "metadataTypeId": 7,
      "typeArguments": [
        "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
      ]
    },
    {
      "type": "struct events::CampaignExitedEvent",
      "concreteTypeId": "9d8d1d9010b68a9c889f3eb9e88272b3a75f652d4455d0291f1d5fac12df3f29",
      "metadataTypeId": 10
    },
    {
      "type": "struct events::CampaignExtendedEvent",
      "concreteTypeId": "a34ace61557454ecf2a213f16b6ce3c350455fb5a868df6ac8ee00f794f520f3",
      "metadataTypeId": 11
    },
    {
      "type": "struct events::CampaignFundedEvent",
      "concreteTypeId": "24c328778b46489b4d13adcfa15d09b81042e36d4a5db1555943f564ef3914e2",
      "metadataTypeId": 12
    },
    {
      "type": "struct events::CampaignJoinedEvent",
      "concreteTypeId": "2aef03381bfa1660e6271476a360a153b43c5a02315c8fd254f1ce0e24edd239",
      "metadataTypeId": 13
    },
    {
      "type": "struct events::InputDebugEvent",
      "concreteTypeId": "287a294f937174c5fcf9670652977b288cc4988603feed1b634de9860baf7663",
      "metadataTypeId": 14
    },
    {
      "type": "struct events::NewCampaignEvent",
      "concreteTypeId": "b6ee5e8babadf83e3ff35b2407daf5b0910d59e962fdf6deb39c79b95052c351",
      "metadataTypeId": 15
    },
    {
      "type": "struct events::NewPositionEvent",
      "concreteTypeId": "fc022658cc2ae066546794de628b6f106705641b98376b35c3ed23a5ab97a46e",
      "metadataTypeId": 16
    },
    {
      "type": "struct events::PositionDepositEvent",
      "concreteTypeId": "6d400b2f23401091672a24f55f96680d4a28b0b3e8d8b6a6506b7cfccad56c5a",
      "metadataTypeId": 17
    },
    {
      "type": "struct lib::data_structures::CampaignInfo",
      "concreteTypeId": "486c08a4f3b4d822274de2ec53c05521b4c22835be1de3d13b472c0f08ddb30c",
      "metadataTypeId": 18
    },
    {
      "type": "struct lib::data_structures::Position",
      "concreteTypeId": "3b78831ffa70e307177d090b6ba06067f5cfc625a38010a1235f1b3748dd4723",
      "metadataTypeId": 19
    },
    {
      "type": "struct std::asset_id::AssetId",
      "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      "metadataTypeId": 21
    },
    {
      "type": "struct std::string::String",
      "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c",
      "metadataTypeId": 25
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    },
    {
      "type": "u8",
      "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
    }
  ],
  "metadataTypes": [
    {
      "type": "(_, _)",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": 5
        }
      ]
    },
    {
      "type": "(_, _)",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "(_, _)",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 21
        },
        {
          "name": "__tuple_element",
          "typeId": 21
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 3
    },
    {
      "type": "enum Error",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "StartTimeInPast",
          "typeId": 1
        },
        {
          "name": "EndTimeBeforeStart",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "InvalidStakingToken",
          "typeId": 21
        },
        {
          "name": "InvalidRewardToken",
          "typeId": 21
        },
        {
          "name": "CampaignEnded",
          "typeId": 1
        },
        {
          "name": "NoRewardsSent",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "WrongRewardToken",
          "typeId": 2
        },
        {
          "name": "NotCampaignOwner",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "NotPositionOwner",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "InvalidNewEndTime",
          "typeId": 1
        },
        {
          "name": "NoStakedTokens",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "AlreadyJoined",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "NotInCampaign",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum lib::data_structures::TokenIdentifier",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "InputCoin",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "OutputCoin",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "CallerBalance",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "Address",
          "typeId": 20
        },
        {
          "name": "ContractId",
          "typeId": 24
        }
      ]
    },
    {
      "type": "enum std::option::Option",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "None",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "Some",
          "typeId": 8
        }
      ],
      "typeParameters": [
        8
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 8
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 9
    },
    {
      "type": "struct events::CampaignExitedEvent",
      "metadataTypeId": 10,
      "components": [
        {
          "name": "position_id",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "campaign_id",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct events::CampaignExtendedEvent",
      "metadataTypeId": 11,
      "components": [
        {
          "name": "campaign_id",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "new_end_time",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct events::CampaignFundedEvent",
      "metadataTypeId": 12,
      "components": [
        {
          "name": "campaign_id",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "new_reward_rate",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct events::CampaignJoinedEvent",
      "metadataTypeId": 13,
      "components": [
        {
          "name": "position_id",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "campaign_id",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct events::InputDebugEvent",
      "metadataTypeId": 14,
      "components": [
        {
          "name": "index",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "asset_id",
          "typeId": 21
        },
        {
          "name": "amount",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct events::NewCampaignEvent",
      "metadataTypeId": 15,
      "components": [
        {
          "name": "campaign_id",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "owner",
          "typeId": 6
        },
        {
          "name": "reward_asset",
          "typeId": 21
        },
        {
          "name": "staking_token",
          "typeId": 21
        },
        {
          "name": "start_time",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "end_time",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "reward_rate",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct events::NewPositionEvent",
      "metadataTypeId": 16,
      "components": [
        {
          "name": "position_id",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "owner",
          "typeId": 6
        },
        {
          "name": "asset_id",
          "typeId": 21
        }
      ]
    },
    {
      "type": "struct events::PositionDepositEvent",
      "metadataTypeId": 17,
      "components": [
        {
          "name": "position_id",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "asset",
          "typeId": 21
        },
        {
          "name": "amount",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct lib::data_structures::CampaignInfo",
      "metadataTypeId": 18,
      "components": [
        {
          "name": "reward_asset",
          "typeId": 21
        },
        {
          "name": "start_time",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "end_time",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "total_deposited",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "remaining_reward",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "reward_rate",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "last_update_time",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "accumulated_reward_per_share",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "staking_token",
          "typeId": 21
        }
      ]
    },
    {
      "type": "struct lib::data_structures::Position",
      "metadataTypeId": 19,
      "components": [
        {
          "name": "asset",
          "typeId": 21
        },
        {
          "name": "amount_deposited",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "num_campaigns",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 20,
      "components": [
        {
          "name": "bits",
          "typeId": 3
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 21,
      "components": [
        {
          "name": "bits",
          "typeId": 3
        }
      ]
    },
    {
      "type": "struct std::bytes::Bytes",
      "metadataTypeId": 22,
      "components": [
        {
          "name": "buf",
          "typeId": 23
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::bytes::RawBytes",
      "metadataTypeId": 23,
      "components": [
        {
          "name": "ptr",
          "typeId": 9
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 24,
      "components": [
        {
          "name": "bits",
          "typeId": 3
        }
      ]
    },
    {
      "type": "struct std::string::String",
      "metadataTypeId": 25,
      "components": [
        {
          "name": "bytes",
          "typeId": 22
        }
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "_position_id",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "_position_token",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        },
        {
          "name": "_reward_asset",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        },
        {
          "name": "_recipient",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        }
      ],
      "name": "claim_rewards",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Claims accrued rewards for a position."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `position_id`: The ID of the position to claim rewards for"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `position_token`: A reference to the position NFT to prove ownership"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `reward_asset`: The reward token to claim"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `recipient`: The identity that will receive the claimed rewards"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Returns"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `u64`: The amount of rewards claimed"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Additional Effects"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Automatically accrues any pending rewards before claiming"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Transfers claimed rewards to the recipient"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Resets the accrued rewards counter for the specified asset"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Reverts"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the position does not exist"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the position NFT is not provided or invalid"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When there are no rewards to claim for the specified asset"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the reward transfer fails"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Number of Storage Accesses"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Reads: 2"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Position info"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Accrued rewards"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Writes: 1"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Update accrued rewards"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Events"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `RewardsClaimedEvent`: Emitted when rewards are successfully claimed"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Examples"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```sway"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let position_token = AssetId::InputCoin(0);"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let recipient = Identity::Address(my_address);"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let claimed_amount = claim_rewards("
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     position_id,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     position_token,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     reward_asset,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     recipient,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " );"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```"
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "recipient",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "start_time",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "end_time",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "staking_token",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        },
        {
          "name": "reward_asset",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "create_campaign",
      "output": "9635f73884a133386ba8236d1bceba4a2c76dcf785c558f55ab8095965cb731e",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Creates a new incentive campaign for a specific pool."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `recipient`: The identity that will receive the campaign NFT and have control over it"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `start_time`: The timestamp when the campaign will start"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `end_time`: The timestamp when the campaign will end"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `staking_token`: The LP token that users need to stake to participate"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `reward_asset`: The token that will be distributed as rewards"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Returns"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `(CampaignId, Option<AssetId>)`: The ID of the created campaign and optionally the output index"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "    of the minted NFT if recipient is an address"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Reverts"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When `start_time` is in the past"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When `end_time` is before `start_time`"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When `staking_token` is not a valid LP token"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When `reward_asset` is not a valid token"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Number of Storage Accesses"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Reads: 1"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Writes: 3"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Examples"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```sway"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let recipient = Identity::Address(my_address);"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let start_time = timestamp() + 7 * 24 * 60 * 60; // 1 week from now"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let end_time = start_time + 7 * 24 * 60 * 60; // 1 week from start time"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let staking_token = AssetId::from(LP_TOKEN);"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let reward_asset = AssetId::from(REWARD_TOKEN);"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let (campaign_id, nft_output) = create_campaign("
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     recipient,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     start_time,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     end_time,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     staking_token,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     reward_asset,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " );"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " // Fund campaign in a separate transaction"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " // This would typically be done in a script"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " fund_rewards {"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     value: 1_000_000, // 1M reward tokens"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     asset_id: reward_asset,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " }("
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     campaign_id,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     AssetId::OutputCoin(nft_output.unwrap()),"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " );"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```"
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "recipient",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "staking_token",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "create_position",
      "output": "9635f73884a133386ba8236d1bceba4a2c76dcf785c558f55ab8095965cb731e",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Creates a new position for staking tokens."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `recipient`: The identity that will receive the position NFT and have control over it"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `staking_token`: The token being deposited"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Returns"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `(PositionId, Option<u64>)`: The ID of the created position and optionally the output index"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   of the minted NFT if recipient is an address"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Additional Effects"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Mints a new NFT representing position ownership"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Transfers the NFT to the recipient"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Initializes an empty position in storage"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Number of Storage Accesses"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Reads: 1"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Next position ID"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Writes: 3"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Update next position ID"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Store new position"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Store position owner"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Events"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `NewPositionEvent`: Emitted when a position is created"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Examples"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```sway"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let recipient = Identity::Address(my_address);"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let (position_id, nft_output) = create_position(recipient);"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```"
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "position_id",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "position_token",
          "concreteTypeId": "d5a135148379b6eeb66df67f95d2c23c8b803678d425fa3d7c191c0555ccfe51"
        }
      ],
      "name": "deposit_assets",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Deposits tokens into a position."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `position_id`: The ID of the position to deposit into"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `position_token`: A reference to the position NFT to prove ownership"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `staking_token`: The token being deposited"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Additional Requirements"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Must send the staking tokens along with the call (payable function)"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * If position is in campaigns, tokens must match campaign requirements"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Additional Effects"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Updates total staked amount for all campaigns the position is in"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Accrues any pending rewards before deposit (if in campaigns)"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Reverts"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the position does not exist"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the position NFT is not provided or invalid"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When no tokens are sent with the call"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When sent tokens don't match campaign requirements (if in campaigns)"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Number of Storage Accesses"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Reads: 2"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Position info"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Last reward calculation (if in campaigns)"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Writes: 2"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Update position"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Update total staked (if in campaigns)"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Events"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `PositionDepositEvent`: Emitted when tokens are deposited"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Examples"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```sway"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let position_token = AssetId::InputCoin(0);"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let amount = 1_000_000; // Amount of LP tokens to deposit"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " deposit_assets {"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     value: amount,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     asset_id: staking_token,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " }("
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     position_id,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     position_token,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " );"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```"
          ]
        },
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "position_id",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "position_token",
          "concreteTypeId": "d5a135148379b6eeb66df67f95d2c23c8b803678d425fa3d7c191c0555ccfe51"
        },
        {
          "name": "campaign_id",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "exit_campaign",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Exits a position from a campaign, stopping reward accrual."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `position_id`: The ID of the position to exit"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `position_token`: A reference to the position NFT to prove ownership"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `campaign_id`: The ID of the campaign to exit from"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Additional Effects"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Accrues any pending rewards before exiting"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Updates the position's campaign participation count"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Reverts"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the position does not exist"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the position NFT is not provided or invalid"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the campaign does not exist"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the position is not currently participating in the campaign"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Number of Storage Accesses"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Reads: 3"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Position info"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Campaign info"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Last reward calculation"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Writes: 3"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Update position's num_campaigns"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Remove last reward calculation entry"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Update accrued rewards"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Events"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `CampaignExitedEvent`: Emitted when a position successfully exits a campaign"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Examples"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```sway"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let position_token = AssetId::InputCoin(0);"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " exit_campaign("
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     position_id,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     position_token,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     campaign_id,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " );"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```"
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "campaign_id",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "campaign_token",
          "concreteTypeId": "d5a135148379b6eeb66df67f95d2c23c8b803678d425fa3d7c191c0555ccfe51"
        },
        {
          "name": "end_time",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "extend_campaign",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Extends the duration of an existing campaign."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `campaign_id`: The ID of the campaign to extend"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `campaign_token`: A reference to the campaign NFT to prove ownership"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `end_time`: The new end time for the campaign"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Reverts"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the campaign does not exist"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the campaign NFT is not provided or invalid"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the new end time is not later than the current end time"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the campaign has already ended"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Number of Storage Accesses"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Reads: 2"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Writes: 1"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Events"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `CampaignExtendedEvent`: Emitted when the campaign duration is successfully extended"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Examples"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```sway"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let campaign_token = AssetId::InputCoin(0);"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let new_end_time = timestamp() + 14 * 24 * 60 * 60; // Extend for 2 more weeks"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " extend_campaign("
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     campaign_id,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     campaign_token,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     new_end_time,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " );"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```"
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "campaign_id",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "campaign_token",
          "concreteTypeId": "d5a135148379b6eeb66df67f95d2c23c8b803678d425fa3d7c191c0555ccfe51"
        }
      ],
      "name": "fund_rewards",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Adds additional reward tokens to an existing campaign."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `campaign_id`: The ID of the campaign to fund"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `nft_input_number`: The index of the NFT input in the transaction"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `reward_input_number`: The index of the reward input in the transaction"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Additional Requirements"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Must send the reward tokens along with the call (payable function)"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Sent tokens must match the campaign's reward asset"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Reverts"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the campaign does not exist"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the campaign NFT is not provided or invalid"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the campaign has already ended"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When no tokens are sent with the call"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When sent tokens don't match the campaign's reward asset"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Number of Storage Accesses"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Reads: 2"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Writes: 1"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Events"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `CampaignFundedEvent`: Emitted when new rewards are added to the campaign"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Examples"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```sway"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let campaign_token = AssetId::InputCoin(0);"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let additional_rewards = 500_000; // Adding 500K more reward tokens"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " fund_rewards {"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     value: additional_rewards,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     asset_id: reward_asset,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " }("
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     campaign_id,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     campaign_token,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " );"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```"
          ]
        },
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "_position_id",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "_reward_asset",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "get_accrued_rewards",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Returns the amount of already accrued rewards for a position."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `position_id`: The ID of the position to query"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `reward_asset`: The reward token to check"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Returns"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `u64`: Amount of accrued rewards ready to be claimed"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Number of Storage Accesses"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Reads: 1"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Accrued rewards"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Examples"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```sway"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let claimable = get_accrued_rewards(position_id, reward_asset);"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " if claimable > 0 {"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     // There are rewards ready to claim"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " }"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```"
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "campaign_id",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "get_campaign_info",
      "output": "6e6ed3ba500c0ccfb48956c2f554e29d5ee6d9aa23a33ccfc7bd5e8b30c3ee57",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Returns detailed information about a campaign."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `campaign_id`: The ID of the campaign to query"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Returns"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `Option<CampaignInfo>`: Campaign details if it exists, including:"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - reward_asset: The token being distributed as rewards"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - end_time: When the campaign ends"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - total_deposited: Total amount of staking tokens in the campaign"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - remaining_reward: Undistributed reward tokens"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - reward_rate: Rewards distributed per second"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - last_update_time: Last time rewards were calculated"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - staking_token: The LP token being incentivized"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Number of Storage Accesses"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Reads: 1"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Campaign info"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Examples"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```sway"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " if let Some(info) = get_campaign_info(campaign_id) {"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     let apy = calculate_apy("
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "         info.reward_rate,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "         info.total_deposited,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     );"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " }"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```"
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "position_id",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "campaign_id",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "get_pending_rewards",
      "output": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Returns the amount of unclaimed rewards for a position in a specific campaign."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `position_id`: The ID of the position to query"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `campaign_id`: The ID of the campaign to check"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Returns"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `Option<u64>`: Amount of pending rewards if the position is in the campaign"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Number of Storage Accesses"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Reads: 3"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Position info"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Campaign info"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Last reward calculation"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Examples"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```sway"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " if let Some(pending) = get_pending_rewards(position_id, campaign_id) {"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     if pending > 0 {"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "         // There are rewards to claim"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     }"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " }"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```"
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "position_id",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "get_position_info",
      "output": "a4b1620cd821584119545df53e0b638835f43f899179479d5b22becfcf189ee8",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Returns information about a position."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `position_id`: The ID of the position to query"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Returns"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `Option<PositionInfo>`: Position details if it exists, including:"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - amount_deposited: Total tokens staked in the position"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - num_campaigns: Number of campaigns the position is participating in"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Number of Storage Accesses"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Reads: 1"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Position info"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Examples"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```sway"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " if let Some(info) = get_position_info(position_id) {"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     if info.amount_deposited > 0 {"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "         // Position has staked tokens"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     }"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " }"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```"
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "position_id",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "position_token",
          "concreteTypeId": "d5a135148379b6eeb66df67f95d2c23c8b803678d425fa3d7c191c0555ccfe51"
        },
        {
          "name": "campaign_id",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "join_campaign",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Joins a position to an active campaign to start earning rewards."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `position_id`: The ID of the position to join with"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `position_token`: A reference to the position NFT to prove ownership"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `campaign_id`: The ID of the campaign to join"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Reverts"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the position does not exist"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the position NFT is not provided or invalid"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the campaign does not exist"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the campaign has ended"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the position's staked token doesn't match the campaign's staking token"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the position has already joined this campaign"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the position has no staked tokens"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Number of Storage Accesses"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Reads: 3"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Position info"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Campaign info"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Last reward calculation (to check if already joined)"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Writes: 2"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Update position's num_campaigns"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Set last reward calculation timestamp"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Events"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `CampaignJoinedEvent`: Emitted when a position successfully joins a campaign"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Examples"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```sway"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let position_token = AssetId::InputCoin(0);"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " join_campaign("
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     position_id,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     position_token,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     campaign_id,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " );"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```"
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "_position_id",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "_position_token",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        },
        {
          "name": "_amount",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "_recipient",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        }
      ],
      "name": "withdraw_assets",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Withdraws tokens from a position."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `position_id`: The ID of the position to withdraw from"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `position_token`: A reference to the position NFT to prove ownership"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `amount`: The amount of tokens to withdraw"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `recipient`: The identity that will receive the withdrawn tokens"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Additional Effects"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Accrues any pending rewards before withdrawal (if in campaigns)"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Updates total staked amount for all campaigns the position is in"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * If withdrawing all tokens, automatically exits from all campaigns"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Reverts"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the position does not exist"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the position NFT is not provided or invalid"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the withdrawal amount exceeds the position's balance"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the token transfer fails"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Number of Storage Accesses"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Reads: 2"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Position info"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Last reward calculation (if in campaigns)"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * Writes: 2+"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Update position"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Update total staked (if in campaigns)"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "   - Remove campaign entries (if withdrawing all)"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Events"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `PositionWithdrawEvent`: Emitted when tokens are withdrawn"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `CampaignExitedEvent`: Emitted for each campaign exited (if withdrawing all)"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Examples"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```sway"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let position_token = AssetId::InputCoin(0);"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let recipient = Identity::Address(my_address);"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " let amount = 500_000; // Amount of LP tokens to withdraw"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " withdraw_assets("
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     position_id,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     position_token,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     amount,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            "     recipient,"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " );"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " ```"
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "decimals",
      "output": "2da102c46c7263beeed95818cd7bee801716ba8303dddafdcd0f6c9efda4a0f1",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "name",
      "output": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "symbol",
      "output": "7c06d929390a9aeeb8ffccf8173ac0d101a9976d99dda01cce74541a81e75ac0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "total_assets",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "total_supply",
      "output": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "5679770223941778533",
      "concreteTypeId": "4ed298ed0be3fc65895c5d5263885191731caa9f79ff63e56d98b449e5ba4b3f"
    },
    {
      "logId": "13181577113333790782",
      "concreteTypeId": "b6ee5e8babadf83e3ff35b2407daf5b0910d59e962fdf6deb39c79b95052c351"
    },
    {
      "logId": "18159118810335600742",
      "concreteTypeId": "fc022658cc2ae066546794de628b6f106705641b98376b35c3ed23a5ab97a46e"
    },
    {
      "logId": "2916689130428658885",
      "concreteTypeId": "287a294f937174c5fcf9670652977b288cc4988603feed1b634de9860baf7663"
    },
    {
      "logId": "7872304445726396561",
      "concreteTypeId": "6d400b2f23401091672a24f55f96680d4a28b0b3e8d8b6a6506b7cfccad56c5a"
    },
    {
      "logId": "11352762740263783068",
      "concreteTypeId": "9d8d1d9010b68a9c889f3eb9e88272b3a75f652d4455d0291f1d5fac12df3f29"
    },
    {
      "logId": "11766443893899678956",
      "concreteTypeId": "a34ace61557454ecf2a213f16b6ce3c350455fb5a868df6ac8ee00f794f520f3"
    },
    {
      "logId": "2649005499726842011",
      "concreteTypeId": "24c328778b46489b4d13adcfa15d09b81042e36d4a5db1555943f564ef3914e2"
    },
    {
      "logId": "3093695008549246560",
      "concreteTypeId": "2aef03381bfa1660e6271476a360a153b43c5a02315c8fd254f1ce0e24edd239"
    }
  ],
  "messagesTypes": [],
  "configurables": []
}