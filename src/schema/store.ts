
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { String, Int, BigInt, Float, ID, Bytes, Timestamp, Boolean } from '@sentio/sdk/store'
import { Entity, Required, One, Many, Column, ListColumn, AbstractEntity } from '@sentio/sdk/store'
import { BigDecimal } from '@sentio/bigdecimal'
import { DatabaseSchema } from '@sentio/sdk'







interface PoolConstructorInput {
  id: ID;
  asset0: String;
  asset1: String;
  isStable: Boolean;
  lpToken: String;
  lpTokenSupply: BigInt;
  lpTokenSupplyDecimal: Float;
  reserve0: BigInt;
  reserve1: BigInt;
  reserve0Decimal: Float;
  reserve1Decimal: Float;
  volumeAsset0: BigInt;
  volumeAsset1: BigInt;
  volumeAsset0Decimal: Float;
  volumeAsset1Decimal: Float;
  mostRecentSnapshot: Int;
}
@Entity("Pool")
export class Pool extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	asset0: String

	@Required
	@Column("String")
	asset1: String

	@Required
	@Column("Boolean")
	isStable: Boolean

	@Required
	@Column("String")
	lpToken: String

	@Required
	@Column("BigInt")
	lpTokenSupply: BigInt

	@Required
	@Column("Float")
	lpTokenSupplyDecimal: Float

	@Required
	@Column("BigInt")
	reserve0: BigInt

	@Required
	@Column("BigInt")
	reserve1: BigInt

	@Required
	@Column("Float")
	reserve0Decimal: Float

	@Required
	@Column("Float")
	reserve1Decimal: Float

	@Required
	@Column("BigInt")
	volumeAsset0: BigInt

	@Required
	@Column("BigInt")
	volumeAsset1: BigInt

	@Required
	@Column("Float")
	volumeAsset0Decimal: Float

	@Required
	@Column("Float")
	volumeAsset1Decimal: Float

	@Required
	@Column("Int")
	mostRecentSnapshot: Int
  constructor(data: PoolConstructorInput) {super()}
  
}


interface PoolSnapshotConstructorInput {
  id: ID;
  poolId: ID;
  timestamp: Int;
  lpTokenSupply: BigInt;
  lpTokenSupplyDecimal: Float;
  transactions: Int;
  reserve0: BigInt;
  reserve1: BigInt;
  reserve0Decimal: Float;
  reserve1Decimal: Float;
  volumeAsset0: BigInt;
  volumeAsset1: BigInt;
  volumeAsset0Decimal: Float;
  volumeAsset1Decimal: Float;
}
@Entity("PoolSnapshot")
export class PoolSnapshot extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("ID")
	poolId: ID

	@Required
	@Column("Int")
	timestamp: Int

	@Required
	@Column("BigInt")
	lpTokenSupply: BigInt

	@Required
	@Column("Float")
	lpTokenSupplyDecimal: Float

	@Required
	@Column("Int")
	transactions: Int

	@Required
	@Column("BigInt")
	reserve0: BigInt

	@Required
	@Column("BigInt")
	reserve1: BigInt

	@Required
	@Column("Float")
	reserve0Decimal: Float

	@Required
	@Column("Float")
	reserve1Decimal: Float

	@Required
	@Column("BigInt")
	volumeAsset0: BigInt

	@Required
	@Column("BigInt")
	volumeAsset1: BigInt

	@Required
	@Column("Float")
	volumeAsset0Decimal: Float

	@Required
	@Column("Float")
	volumeAsset1Decimal: Float
  constructor(data: PoolSnapshotConstructorInput) {super()}
  
}


interface CampaignConstructorInput {
  id: String;
  startTime: Int;
  endTime: Int;
  lastAccrualTime: Int;
  rewardAssetId: String;
  rewardsAccruedPerStakingToken: Int;
  stakingToken: String;
  totalRemainingRewards: Int;
  owner: String;
}
@Entity("Campaign")
export class Campaign extends AbstractEntity  {

	@Required
	@Column("String")
	id: String

	@Required
	@Column("Int")
	startTime: Int

	@Required
	@Column("Int")
	endTime: Int

	@Required
	@Column("Int")
	lastAccrualTime: Int

	@Required
	@Column("String")
	rewardAssetId: String

	@Required
	@Column("Int")
	rewardsAccruedPerStakingToken: Int

	@Required
	@Column("String")
	stakingToken: String

	@Required
	@Column("Int")
	totalRemainingRewards: Int

	@Required
	@Column("String")
	owner: String
  constructor(data: CampaignConstructorInput) {super()}
  
}


interface PositionConstructorInput {
  id: String;
  identity: String;
  stakingTokens: Int;
  lastAccrualTime: Int;
  rewardAssetId: String;
  rewardsAccrued: Int;
}
@Entity("Position")
export class Position extends AbstractEntity  {

	@Required
	@Column("String")
	id: String

	@Required
	@Column("String")
	identity: String

	@Required
	@Column("Int")
	stakingTokens: Int

	@Required
	@Column("Int")
	lastAccrualTime: Int

	@Required
	@Column("String")
	rewardAssetId: String

	@Required
	@Column("Int")
	rewardsAccrued: Int
  constructor(data: PositionConstructorInput) {super()}
  
}


interface UserConstructorInput {
  id: String;
  totalPendingRewards: Int;
  totalClaimedRewards: Int;
}
@Entity("User")
export class User extends AbstractEntity  {

	@Required
	@Column("String")
	id: String

	@Required
	@Column("Int")
	totalPendingRewards: Int

	@Required
	@Column("Int")
	totalClaimedRewards: Int
  constructor(data: UserConstructorInput) {super()}
  
}


const source = `type Pool @entity {
  id: ID!
  asset0: String!
  asset1: String!
  isStable: Boolean!
  lpToken: String!

  lpTokenSupply: BigInt!
  lpTokenSupplyDecimal: Float!

  reserve0: BigInt!
  reserve1: BigInt!
  reserve0Decimal: Float!
  reserve1Decimal: Float!

  volumeAsset0: BigInt!
  volumeAsset1: BigInt!
  volumeAsset0Decimal: Float!
  volumeAsset1Decimal: Float!

  mostRecentSnapshot: Int!
}

type PoolSnapshot @entity {
  id: ID!
  poolId: ID!
  timestamp: Int!
  lpTokenSupply: BigInt!
  lpTokenSupplyDecimal: Float!

  transactions: Int!

  reserve0: BigInt!
  reserve1: BigInt!
  reserve0Decimal: Float!
  reserve1Decimal: Float!

  volumeAsset0: BigInt!
  volumeAsset1: BigInt!
  volumeAsset0Decimal: Float!
  volumeAsset1Decimal: Float!
}

type Campaign @entity {
  id: String!
  startTime: Int!
  endTime: Int!
  lastAccrualTime: Int!
  rewardAssetId: String!
  # rewardRate: Int!
  rewardsAccruedPerStakingToken: Int!
  stakingToken: String!
  totalRemainingRewards: Int!
  # totalPendingRewards: Int!
  # apr: Float!
  owner: String!
}

type Position @entity {
  id: String!
  identity: String!
  stakingTokens: Int!
  lastAccrualTime: Int!
  rewardAssetId: String!
  rewardsAccrued: Int!
  # pendingRewardsTotal: Int!
}

type User @entity {
  id: String!
  totalPendingRewards: Int!
  totalClaimedRewards: Int!
}
`
DatabaseSchema.register({
  source,
  entities: {
    "Pool": Pool,
		"PoolSnapshot": PoolSnapshot,
		"Campaign": Campaign,
		"Position": Position,
		"User": User
  }
})
